{"name":"Goatee","tagline":"A Redis-backed notification server written in Go","body":"goatee\r\n======\r\n\r\nA Redis-backed notification server written in Go.\r\n\r\n[![Build Status](https://travis-ci.org/johnernaut/goatee.png?branch=master)](https://travis-ci.org/johnernaut/goatee)\r\n\r\n**Client library:** [goatee.js](https://github.com/johnernaut/goatee.js)\r\n\r\n##Installation\r\n`go get github.com/johnernaut/goatee`\r\n\r\n`import \"github.com/johnernaut/goatee\"`\r\n\r\n##Usage\r\n**goatee** works by listening on a channel via [Redis Pub/Sub](http://redis.io/topics/pubsub) and then sending the received message to connected clients via [WebSockets](http://en.wikipedia.org/wiki/WebSocket).  Clients may create channels to listen on by using the [goatee client library](https://github.com/johnernaut/goatee.js).\r\n\r\n### Configuration\r\n**goatee** will look for a JSON configuration file in a `config` folder at the root of your project with the following names based on your environment: `development.json`, `production.json`, `etc`.  By default `config/development.json` will be used but you can also specify a `GO_ENV` environment variable and the name of that will be used instead.\r\n\r\n```javascript\r\n// example json configuration\r\n// specify redis and websocket hosts\r\n{\r\n  \"redis\": {\r\n    \"host\": \"localhost:6379\"\r\n  },\r\n  \"web\": {\r\n    \"host\": \"localhost:1235\"\r\n  }\r\n}\r\n```\r\n\r\n======\r\n#### Server\r\n```go\r\npackage main\r\n\r\nimport (\r\n    \"github.com/johnernaut/goatee\"\r\n    \"log\"\r\n)\r\n\r\nfunc main() {\r\n    // subscribe to one or many redis channels\r\n    err := goatee.CreateServer()\r\n\r\n    if err != nil {\r\n        log.Fatal(\"Error: \", err.Error())\r\n    }\r\n}\r\n```\r\n========\r\n#### Client\r\nAn example of how to use the [goatee client library](https://github.com/johnernaut/goatee.js) can be found in the `examples` folder.\r\n\r\n========\r\n#### Redis\r\nWith **goatee** running and your web browser connected to the socket, you should now be able to test message sending from Redis to your client (browser).  Run `redis-cli` and publish a message to the channel you subscribed to in your Go server.  By default, **goatee** expects your Redis messages to have a specified JSON format to send to the client with the following details:\r\n* `payload`\r\n* `created_at (optional)`\r\n\r\nE.x. `publish 'mychannel' '{\"payload\": \"mymessage which is a string, etc.\"}'`\r\n\r\n## Tests\r\n`go test github.com/johnernaut/goatee`\r\n\r\n## Authors\r\n- [johnernaut](https://github.com/johnernaut)\r\n- you\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}